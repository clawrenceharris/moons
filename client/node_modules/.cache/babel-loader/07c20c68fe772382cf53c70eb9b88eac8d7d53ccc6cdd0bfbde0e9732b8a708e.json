{"ast":null,"code":"// import { create } from \"zustand\";\n// import {\n//   Product,\n//   ProductBrand,\n//   ProductCategory,\n//   ProductFlag,\n//   ProductImage,\n//   ProductVariants,\n// } from \"../../../shared/types\";\n// import {\n\n// } from \"../api/products\";\n// import {\n//   fetchAllBrands,\n//   fetchAllCategories,\n//   fetchAllFlags,\n//   fetchAllSubcategories,\n// } from \"../api/tags\";\n\n// interface ProductStore {\n//   products: Record<number, Product>;\n//   productCategories: Record<number, ProductCategory>;\n//   productSubcategories: Record<number, ProductCategory>;\n//   productBrands: Record<number, ProductBrand>;\n//   productImages: Record<number, ProductImage[]>;\n//   productVariants: Record<number, ProductVariants>;\n//   categories: ProductCategory[];\n//   subcategories: ProductCategory[];\n//   flags: ProductFlag[];\n//   brands: ProductBrand[];\n//   productFlags: Record<number, ProductFlag[]>;\n//   isLoading: boolean;\n//   error: string | null;\n\n//   getProductById: (id: number) => Promise<void>;\n\n//   getProductCategory: (id: number) => Promise<void>;\n//   getProductSubcategory: (id: number) => Promise<void>;\n//   getProductImages: (id: number) => Promise<void>;\n//   getProductFlags: (id: number) => Promise<void>;\n//   getProductBrand: (id: number) => Promise<void>;\n//   getProductVariants: (id: number) => Promise<void>;\n//   getProductMetadata: () => Promise<void>;\n// }\n// export const useProductStore = create<ProductStore>((set, get) => ({\n//   products: {},\n//   productFlags: {},\n//   productCategories: {},\n//   productSubcategories: {},\n//   productVariants: {},\n//   productImages: {},\n//   categories: [],\n//   subcategories: [],\n//   productBrands: {},\n//   flags: [],\n//   brands: [],\n//   isLoading: true,\n//   error: null,\n\n//   getProductById: async (id: number) => {\n//     if (get().products[id]) return;\n//     set({ isLoading: true, error: null });\n//     try {\n//       const [product, category, subcategory, flags, brand, images, variants] =\n//         await Promise.all([\n\n//         ]);\n\n//       set((state) => ({\n//         products: {\n//           ...state.products,\n//           [id]: {\n//             ...product,\n//             category,\n//             subcategory,\n//             brand,\n//             images,\n//             flags,\n//             variants,\n//           },\n//         },\n//         isLoading: false,\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n\n//   getProductCategory: async (id: number) => {\n//     if (get().productCategories[id]) return;\n//     set({ isLoading: true, error: null });\n\n//     try {\n//       const res = await fetchProductCategory(id);\n\n//       set((state) => ({\n//         productCategories: { ...state.productCategories, [id]: res },\n//         isLoading: false,\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n//   getProductMetadata: async () => {\n//     set({ isLoading: true, error: null });\n//     try {\n//       const [categories, subcategories, flags, brands] = await Promise.all([\n//         fetchAllCategories(),\n//         fetchAllSubcategories(),\n//         fetchAllFlags(),\n//         fetchAllBrands(),\n//       ]);\n//       set({\n//         categories,\n//         subcategories,\n//         flags,\n//         brands,\n//         isLoading: false,\n//       });\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n//   getProductVariants: async (id: number) => {\n//     if (get().productVariants[id]) return;\n\n//     try {\n//       const res = await fetchProductVariants(id);\n//       set((state) => ({\n//         productVariants: {\n//           ...state.productVariants,\n//           [id]: res,\n//         },\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n//   getProductImages: async (id: number) => {\n//     if (get().productImages[id]) return;\n\n//     try {\n//       const res = await fetchProductImages(id);\n//       set((state) => ({\n//         productImages: {\n//           ...state.productImages,\n//           [id]: res || [],\n//         },\n//         isLoading: false,\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n//   getProductSubcategory: async (id: number) => {\n//     if (get().productSubcategories[id]) return;\n\n//     try {\n//       const res = await fetchProductSubcategory(id);\n//       set((state) => ({\n//         productSubcategories: {\n//           ...state.productSubcategories,\n//           [id]: res,\n//         },\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n//   getProductBrand: async (id: number) => {\n//     if (get().productCategories[id]) return;\n\n//     try {\n//       const res = await fetchProductBrand(id);\n//       set((state) => ({\n//         productBrands: {\n//           ...state.productBrands,\n//           [id]: res,\n//         },\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n\n//   getProductFlags: async (id: number) => {\n//     if (get().productFlags[id]) return;\n\n//     try {\n//       const res = await fetchProductFlags(id);\n//       set((state) => ({\n//         productFlags: {\n//           ...state.productFlags,\n//           [id]: res || [],\n//         },\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n// }));","map":{"version":3,"names":[],"sources":["/Users/caleb/Dev/moons_footwear/client/src/stores/useProductStore.ts"],"sourcesContent":["// import { create } from \"zustand\";\n// import {\n//   Product,\n//   ProductBrand,\n//   ProductCategory,\n//   ProductFlag,\n//   ProductImage,\n//   ProductVariants,\n// } from \"../../../shared/types\";\n// import {\n\n// } from \"../api/products\";\n// import {\n//   fetchAllBrands,\n//   fetchAllCategories,\n//   fetchAllFlags,\n//   fetchAllSubcategories,\n// } from \"../api/tags\";\n\n// interface ProductStore {\n//   products: Record<number, Product>;\n//   productCategories: Record<number, ProductCategory>;\n//   productSubcategories: Record<number, ProductCategory>;\n//   productBrands: Record<number, ProductBrand>;\n//   productImages: Record<number, ProductImage[]>;\n//   productVariants: Record<number, ProductVariants>;\n//   categories: ProductCategory[];\n//   subcategories: ProductCategory[];\n//   flags: ProductFlag[];\n//   brands: ProductBrand[];\n//   productFlags: Record<number, ProductFlag[]>;\n//   isLoading: boolean;\n//   error: string | null;\n\n//   getProductById: (id: number) => Promise<void>;\n\n//   getProductCategory: (id: number) => Promise<void>;\n//   getProductSubcategory: (id: number) => Promise<void>;\n//   getProductImages: (id: number) => Promise<void>;\n//   getProductFlags: (id: number) => Promise<void>;\n//   getProductBrand: (id: number) => Promise<void>;\n//   getProductVariants: (id: number) => Promise<void>;\n//   getProductMetadata: () => Promise<void>;\n// }\n// export const useProductStore = create<ProductStore>((set, get) => ({\n//   products: {},\n//   productFlags: {},\n//   productCategories: {},\n//   productSubcategories: {},\n//   productVariants: {},\n//   productImages: {},\n//   categories: [],\n//   subcategories: [],\n//   productBrands: {},\n//   flags: [],\n//   brands: [],\n//   isLoading: true,\n//   error: null,\n\n//   getProductById: async (id: number) => {\n//     if (get().products[id]) return;\n//     set({ isLoading: true, error: null });\n//     try {\n//       const [product, category, subcategory, flags, brand, images, variants] =\n//         await Promise.all([\n\n//         ]);\n\n//       set((state) => ({\n//         products: {\n//           ...state.products,\n//           [id]: {\n//             ...product,\n//             category,\n//             subcategory,\n//             brand,\n//             images,\n//             flags,\n//             variants,\n//           },\n//         },\n//         isLoading: false,\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n\n//   getProductCategory: async (id: number) => {\n//     if (get().productCategories[id]) return;\n//     set({ isLoading: true, error: null });\n\n//     try {\n//       const res = await fetchProductCategory(id);\n\n//       set((state) => ({\n//         productCategories: { ...state.productCategories, [id]: res },\n//         isLoading: false,\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n//   getProductMetadata: async () => {\n//     set({ isLoading: true, error: null });\n//     try {\n//       const [categories, subcategories, flags, brands] = await Promise.all([\n//         fetchAllCategories(),\n//         fetchAllSubcategories(),\n//         fetchAllFlags(),\n//         fetchAllBrands(),\n//       ]);\n//       set({\n//         categories,\n//         subcategories,\n//         flags,\n//         brands,\n//         isLoading: false,\n//       });\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n//   getProductVariants: async (id: number) => {\n//     if (get().productVariants[id]) return;\n\n//     try {\n//       const res = await fetchProductVariants(id);\n//       set((state) => ({\n//         productVariants: {\n//           ...state.productVariants,\n//           [id]: res,\n//         },\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n//   getProductImages: async (id: number) => {\n//     if (get().productImages[id]) return;\n\n//     try {\n//       const res = await fetchProductImages(id);\n//       set((state) => ({\n//         productImages: {\n//           ...state.productImages,\n//           [id]: res || [],\n//         },\n//         isLoading: false,\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n//   getProductSubcategory: async (id: number) => {\n//     if (get().productSubcategories[id]) return;\n\n//     try {\n//       const res = await fetchProductSubcategory(id);\n//       set((state) => ({\n//         productSubcategories: {\n//           ...state.productSubcategories,\n//           [id]: res,\n//         },\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n//   getProductBrand: async (id: number) => {\n//     if (get().productCategories[id]) return;\n\n//     try {\n//       const res = await fetchProductBrand(id);\n//       set((state) => ({\n//         productBrands: {\n//           ...state.productBrands,\n//           [id]: res,\n//         },\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n\n//   getProductFlags: async (id: number) => {\n//     if (get().productFlags[id]) return;\n\n//     try {\n//       const res = await fetchProductFlags(id);\n//       set((state) => ({\n//         productFlags: {\n//           ...state.productFlags,\n//           [id]: res || [],\n//         },\n//       }));\n//     } catch (err: any) {\n//       set({ error: err.message, isLoading: false });\n//     }\n//   },\n// }));\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}