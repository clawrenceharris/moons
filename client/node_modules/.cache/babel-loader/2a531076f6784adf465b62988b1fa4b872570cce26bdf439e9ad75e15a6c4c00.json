{"ast":null,"code":"import { create } from \"zustand\";\nimport { fetchProductById, fetchProductCategory, fetchProductFlags } from \"../api/products\";\nimport { fetchAllBrands, fetchAllCategories, fetchAllFlags, fetchAllSubcategories } from \"../api/tags\";\nexport const useProductStore = create((set, get) => ({\n  products: {},\n  productFlags: {},\n  productCategories: {},\n  productSubcategories: {},\n  categories: [],\n  subcategories: [],\n  flags: [],\n  brands: [],\n  isLoading: false,\n  error: null,\n  getProductById: async id => {\n    if (get().products[id]) return;\n    try {\n      const res = await fetchProductById(id);\n      set(state => ({\n        products: {\n          ...state.products,\n          [id]: res\n        }\n      }));\n    } catch (err) {\n      set({\n        error: err.message\n      });\n    }\n  },\n  getProductCategory: async id => {\n    if (get().productCategories[id]) return;\n    try {\n      const res = await fetchProductCategory(id);\n      set(state => ({\n        productCategories: {\n          ...state.productCategories,\n          [id]: res\n        }\n      }));\n    } catch (err) {\n      set({\n        error: err.message\n      });\n    }\n  },\n  getProductMetadata: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const [categories, subcategories, flags, brands] = await Promise.all([fetchAllCategories(), fetchAllSubcategories(), fetchAllFlags(), fetchAllBrands()]);\n      set({\n        categories,\n        subcategories,\n        flags,\n        brands,\n        isLoading: false\n      });\n    } catch (err) {\n      set({\n        error: err.message,\n        isLoading: false\n      });\n    }\n  },\n  getProductSubcategories: async id => {\n    if (get().productSubcategories[id]) return;\n    try {\n      const res = await fetchProductCategory(id);\n      set(state => ({\n        productCategories: {\n          ...state.productCategories,\n          [id]: res || []\n        }\n      }));\n    } catch (err) {\n      set({\n        error: err.message\n      });\n    }\n  },\n  getProductBrand: async id => {\n    if (get().productCategories[id]) return;\n    try {\n      const res = await fetchProductCategory(id);\n      set(state => ({\n        productCategories: {\n          ...state.productCategories,\n          [id]: res || []\n        }\n      }));\n    } catch (err) {\n      set({\n        error: err.message\n      });\n    }\n  },\n  getProductFlags: async id => {\n    if (get().productFlags[id]) return;\n    try {\n      const res = await fetchProductFlags(id);\n      set(state => ({\n        productFlags: {\n          ...state.productFlags,\n          [id]: res || []\n        }\n      }));\n    } catch (err) {\n      set({\n        error: err.message\n      });\n    }\n  }\n}));","map":{"version":3,"names":["create","fetchProductById","fetchProductCategory","fetchProductFlags","fetchAllBrands","fetchAllCategories","fetchAllFlags","fetchAllSubcategories","useProductStore","set","get","products","productFlags","productCategories","productSubcategories","categories","subcategories","flags","brands","isLoading","error","getProductById","id","res","state","err","message","getProductCategory","getProductMetadata","Promise","all","getProductSubcategories","getProductBrand","getProductFlags"],"sources":["/Users/caleb/Dev/moons_footwear/client/src/stores/useProductStore.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport {\n  Product,\n  ProductBrand,\n  ProductCategory,\n  ProductFlag,\n} from \"../../../shared/types\";\nimport {\n  fetchProductById,\n  fetchProductCategory,\n  fetchProductFlags,\n} from \"../api/products\";\nimport {\n  fetchAllBrands,\n  fetchAllCategories,\n  fetchAllFlags,\n  fetchAllSubcategories,\n} from \"../api/tags\";\n\ninterface ProductStore {\n  products: Record<number, Product>;\n  productCategories: Record<number, ProductCategory>;\n  productSubcategories: Record<number, string[]>;\n  categories: ProductCategory[];\n  subcategories: ProductCategory[];\n  flags: ProductFlag[];\n  brands: ProductBrand[];\n\n  productFlags: Record<number, string[]>;\n  isLoading: boolean;\n  error: string | null;\n\n  getProductById: (id: number) => Promise<void>;\n  getProductCategory: (id: number) => Promise<void>;\n  getProductSubcategories: (id: number) => Promise<void>;\n\n  getProductFlags: (id: number) => Promise<void>;\n  getProductBrand: (id: number) => Promise<void>;\n  getProductMetadata: () => Promise<void>;\n}\nexport const useProductStore = create<ProductStore>((set, get) => ({\n  products: {},\n  productFlags: {},\n  productCategories: {},\n  productSubcategories: {},\n  categories: [],\n  subcategories: [],\n  flags: [],\n  brands: [],\n  isLoading: false,\n  error: null,\n\n  getProductById: async (id: number) => {\n    if (get().products[id]) return;\n\n    try {\n      const res = await fetchProductById(id);\n      set((state) => ({\n        products: { ...state.products, [id]: res },\n      }));\n    } catch (err: any) {\n      set({ error: err.message });\n    }\n  },\n\n  getProductCategory: async (id: number) => {\n    if (get().productCategories[id]) return;\n\n    try {\n      const res = await fetchProductCategory(id);\n      set((state) => ({\n        productCategories: { ...state.productCategories, [id]: res },\n      }));\n    } catch (err: any) {\n      set({ error: err.message });\n    }\n  },\n  getProductMetadata: async () => {\n    set({ isLoading: true, error: null });\n    try {\n      const [categories, subcategories, flags, brands] = await Promise.all([\n        fetchAllCategories(),\n        fetchAllSubcategories(),\n        fetchAllFlags(),\n        fetchAllBrands(),\n      ]);\n      set({\n        categories,\n        subcategories,\n        flags,\n        brands,\n        isLoading: false,\n      });\n    } catch (err: any) {\n      set({ error: err.message, isLoading: false });\n    }\n  },\n  getProductSubcategories: async (id: number) => {\n    if (get().productSubcategories[id]) return;\n\n    try {\n      const res = await fetchProductCategory(id);\n      set((state) => ({\n        productCategories: {\n          ...state.productCategories,\n          [id]: res || [],\n        },\n      }));\n    } catch (err: any) {\n      set({ error: err.message });\n    }\n  },\n  getProductBrand: async (id: number) => {\n    if (get().productCategories[id]) return;\n\n    try {\n      const res = await fetchProductCategory(id);\n      set((state) => ({\n        productCategories: {\n          ...state.productCategories,\n          [id]: res || [],\n        },\n      }));\n    } catch (err: any) {\n      set({ error: err.message });\n    }\n  },\n\n  getProductFlags: async (id: number) => {\n    if (get().productFlags[id]) return;\n\n    try {\n      const res = await fetchProductFlags(id);\n      set((state) => ({\n        productFlags: {\n          ...state.productFlags,\n          [id]: res || [],\n        },\n      }));\n    } catch (err: any) {\n      set({ error: err.message });\n    }\n  },\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}