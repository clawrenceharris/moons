{"ast":null,"code":"import { create } from \"zustand\";\nimport { fetchProductBrand, fetchProductById, fetchProductCategory, fetchProductFlags, fetchProductImages, fetchProductSubcategory, fetchProductVariants } from \"../api/products\";\nimport { fetchAllBrands, fetchAllCategories, fetchAllFlags, fetchAllSubcategories } from \"../api/tags\";\nexport const useProductStore = create((set, get) => ({\n  products: {},\n  productFlags: {},\n  productCategories: {},\n  productSubcategories: {},\n  productVariants: {},\n  productImages: {},\n  categories: [],\n  subcategories: [],\n  productBrands: {},\n  flags: [],\n  brands: [],\n  isLoading: true,\n  error: null,\n  getProductById: async id => {\n    if (get().products[id]) return;\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const [product, category, subcategory, flags, brand, images, variants] = await Promise.all([fetchProductById(id), fetchProductCategory(id), fetchProductSubcategory(id), fetchProductFlags(id), fetchProductBrand(id), fetchProductImages(id), fetchProductVariants(id)]);\n      set(state => ({\n        products: {\n          ...state.products,\n          [id]: {\n            ...product,\n            category,\n            subcategory,\n            brand,\n            images,\n            flags\n          }\n        },\n        isLoading: false\n      }));\n    } catch (err) {\n      set({\n        error: err.message,\n        isLoading: false\n      });\n    }\n  },\n  getProductCategory: async id => {\n    if (get().productCategories[id]) return;\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const res = await fetchProductCategory(id);\n      set(state => ({\n        productCategories: {\n          ...state.productCategories,\n          [id]: res\n        },\n        isLoading: false\n      }));\n    } catch (err) {\n      set({\n        error: err.message,\n        isLoading: false\n      });\n    }\n  },\n  getProductMetadata: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const [categories, subcategories, flags, brands] = await Promise.all([fetchAllCategories(), fetchAllSubcategories(), fetchAllFlags(), fetchAllBrands()]);\n      set({\n        categories,\n        subcategories,\n        flags,\n        brands,\n        isLoading: false\n      });\n    } catch (err) {\n      set({\n        error: err.message,\n        isLoading: false\n      });\n    }\n  },\n  getProductVariants: async id => {\n    if (get().productVariants[id]) return;\n    try {\n      const res = await fetchProductVariants(id);\n      set(state => ({\n        productVariants: {\n          ...state.productVariants,\n          [id]: res\n        }\n      }));\n    } catch (err) {\n      set({\n        error: err.message,\n        isLoading: false\n      });\n    }\n  },\n  getProductImages: async id => {\n    if (get().productImages[id]) return;\n    try {\n      const res = await fetchProductImages(id);\n      set(state => ({\n        productImages: {\n          ...state.productImages,\n          [id]: res || []\n        },\n        isLoading: false\n      }));\n    } catch (err) {\n      set({\n        error: err.message,\n        isLoading: false\n      });\n    }\n  },\n  getProductSubcategories: async id => {\n    if (get().productSubcategories[id]) return;\n    try {\n      const res = await fetchProductSubcategory(id);\n    } catch (err) {\n      set({\n        error: err.message,\n        isLoading: false\n      });\n    }\n  },\n  getProductBrand: async id => {\n    if (get().productCategories[id]) return;\n    try {\n      const res = await fetchProductBrand(id);\n      set(state => ({\n        productBrands: {\n          ...state.productBrands,\n          [id]: res\n        }\n      }));\n    } catch (err) {\n      set({\n        error: err.message,\n        isLoading: false\n      });\n    }\n  },\n  getProductFlags: async id => {\n    if (get().productFlags[id]) return;\n    try {\n      const res = await fetchProductFlags(id);\n      set(state => ({\n        productFlags: {\n          ...state.productFlags,\n          [id]: res || []\n        }\n      }));\n    } catch (err) {\n      set({\n        error: err.message,\n        isLoading: false\n      });\n    }\n  }\n}));","map":{"version":3,"names":["create","fetchProductBrand","fetchProductById","fetchProductCategory","fetchProductFlags","fetchProductImages","fetchProductSubcategory","fetchProductVariants","fetchAllBrands","fetchAllCategories","fetchAllFlags","fetchAllSubcategories","useProductStore","set","get","products","productFlags","productCategories","productSubcategories","productVariants","productImages","categories","subcategories","productBrands","flags","brands","isLoading","error","getProductById","id","product","category","subcategory","brand","images","variants","Promise","all","state","err","message","getProductCategory","res","getProductMetadata","getProductVariants","getProductImages","getProductSubcategories","getProductBrand","getProductFlags"],"sources":["/Users/caleb/Dev/moons_footwear/client/src/stores/useProductStore.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport {\n  ProductBrand,\n  ProductCategory,\n  ProductFlag,\n  ProductImage,\n  ProductVariants,\n} from \"../../../shared/types\";\nimport {\n  fetchProductBrand,\n  fetchProductById,\n  fetchProductCategory,\n  fetchProductFlags,\n  fetchProductImages,\n  fetchProductSubcategory,\n  fetchProductVariants,\n} from \"../api/products\";\nimport {\n  fetchAllBrands,\n  fetchAllCategories,\n  fetchAllFlags,\n  fetchAllSubcategories,\n} from \"../api/tags\";\ninterface Product {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  stockQuantity: number;\n  createdAt: string;\n  discount: number;\n  category: ProductCategory;\n  subcategory: ProductCategory;\n  brand: ProductBrand;\n  published: boolean;\n  isArchived: boolean;\n  images: ProductImage[];\n  flags: ProductFlag[];\n}\ninterface ProductStore {\n  products: Record<number, Product>;\n  productCategories: Record<number, ProductCategory>;\n  productSubcategories: Record<number, ProductCategory[]>;\n  productBrands: Record<number, ProductBrand>;\n  productImages: Record<number, ProductImage[]>;\n  productVariants: Record<number, ProductVariants>;\n  categories: ProductCategory[];\n  subcategories: ProductCategory[];\n  flags: ProductFlag[];\n  brands: ProductBrand[];\n  productFlags: Record<number, ProductFlag[]>;\n  isLoading: boolean;\n  error: string | null;\n\n  getProductById: (id: number) => Promise<void>;\n\n  getProductCategory: (id: number) => Promise<void>;\n  getProductSubcategories: (id: number) => Promise<void>;\n  getProductImages: (id: number) => Promise<void>;\n  getProductFlags: (id: number) => Promise<void>;\n  getProductBrand: (id: number) => Promise<void>;\n  getProductVariants: (id: number) => Promise<void>;\n  getProductMetadata: () => Promise<void>;\n}\nexport const useProductStore = create<ProductStore>((set, get) => ({\n  products: {},\n  productFlags: {},\n  productCategories: {},\n  productSubcategories: {},\n  productVariants: {},\n  productImages: {},\n  categories: [],\n  subcategories: [],\n  productBrands: {},\n  flags: [],\n  brands: [],\n  isLoading: true,\n  error: null,\n\n  getProductById: async (id: number) => {\n    if (get().products[id]) return;\n    set({ isLoading: true, error: null });\n    try {\n      const [product, category, subcategory, flags, brand, images, variants] =\n        await Promise.all([\n          fetchProductById(id),\n          fetchProductCategory(id),\n          fetchProductSubcategory(id),\n          fetchProductFlags(id),\n\n          fetchProductBrand(id),\n          fetchProductImages(id),\n          fetchProductVariants(id),\n        ]);\n\n      set((state) => ({\n        products: {\n          ...state.products,\n          [id]: {\n            ...product,\n            category,\n            subcategory,\n            brand,\n            images,\n            flags,\n          },\n        },\n        isLoading: false,\n      }));\n    } catch (err: any) {\n      set({ error: err.message, isLoading: false });\n    }\n  },\n\n  getProductCategory: async (id: number) => {\n    if (get().productCategories[id]) return;\n    set({ isLoading: true, error: null });\n\n    try {\n      const res = await fetchProductCategory(id);\n\n      set((state) => ({\n        productCategories: { ...state.productCategories, [id]: res },\n        isLoading: false,\n      }));\n    } catch (err: any) {\n      set({ error: err.message, isLoading: false });\n    }\n  },\n  getProductMetadata: async () => {\n    set({ isLoading: true, error: null });\n    try {\n      const [categories, subcategories, flags, brands] = await Promise.all([\n        fetchAllCategories(),\n        fetchAllSubcategories(),\n        fetchAllFlags(),\n        fetchAllBrands(),\n      ]);\n      set({\n        categories,\n        subcategories,\n        flags,\n        brands,\n        isLoading: false,\n      });\n    } catch (err: any) {\n      set({ error: err.message, isLoading: false });\n    }\n  },\n  getProductVariants: async (id: number) => {\n    if (get().productVariants[id]) return;\n\n    try {\n      const res = await fetchProductVariants(id);\n      set((state) => ({\n        productVariants: {\n          ...state.productVariants,\n          [id]: res,\n        },\n      }));\n    } catch (err: any) {\n      set({ error: err.message, isLoading: false });\n    }\n  },\n  getProductImages: async (id: number) => {\n    if (get().productImages[id]) return;\n\n    try {\n      const res = await fetchProductImages(id);\n      set((state) => ({\n        productImages: {\n          ...state.productImages,\n          [id]: res || [],\n        },\n        isLoading: false,\n      }));\n    } catch (err: any) {\n      set({ error: err.message, isLoading: false });\n    }\n  },\n  getProductSubcategories: async (id: number) => {\n    if (get().productSubcategories[id]) return;\n\n    try {\n      const res = await fetchProductSubcategory(id);\n    } catch (err: any) {\n      set({ error: err.message, isLoading: false });\n    }\n  },\n  getProductBrand: async (id: number) => {\n    if (get().productCategories[id]) return;\n\n    try {\n      const res = await fetchProductBrand(id);\n      set((state) => ({\n        productBrands: {\n          ...state.productBrands,\n          [id]: res,\n        },\n      }));\n    } catch (err: any) {\n      set({ error: err.message, isLoading: false });\n    }\n  },\n\n  getProductFlags: async (id: number) => {\n    if (get().productFlags[id]) return;\n\n    try {\n      const res = await fetchProductFlags(id);\n      set((state) => ({\n        productFlags: {\n          ...state.productFlags,\n          [id]: res || [],\n        },\n      }));\n    } catch (err: any) {\n      set({ error: err.message, isLoading: false });\n    }\n  },\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}